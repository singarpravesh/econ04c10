---
title: "Introducing STATA"
format: 
  revealjs:
    smaller: true
    slide-number: c/t
---

## Basics
1. Starting STATA
2. The Opening Display
    - Command - this is where stata commands are typed
    - Results - output from commands
    - Review - a listing of commands recently executed
    - Variables - names of variables in data and labels
3. Exiting stata - the `exit` command. 


4. Changing the working directory <br>
`cd "C:\data\poe4stata"`

---

5. The `use` command<br>
`use cps4_small`<br>
`use cps4_small, clear`<br>
Download the data [cps4_small](data/cps4_small.dta)

6. The variables window
    - The variables in the data file are listed
    - **Labels, types, and formats** of the variables

7. Labeling variables<br>
`label variable wage "earnings per hour"`


8. Describing data<br>
`use cps4_small, clear`<br>
`describe`

9. Summarize the data<br>
`summarize`

10. The stata help<br>
`help summarize`<br>
`findit summarize`

## {.smaller}

11. Stata command syntax<br>
`command [varlist] [if] [in] [weight] [, options]`<br>
The terms in brackets [ ] are various optional command components that could be used.
- [varlist] is the list of variables for which the command is used.
- [if] is a condition imposed on the command.
- [in] specifies range of observations for the command.
- [weight] when some sample observations are to be weighted differently than others.
- [, options] command options go here.

---

Example:<br>
`summarize wage, detail`<br>
`summarize wage if female == 1`<br>
`summarize wage if exper >= 10`<br>
`summarize in 1/50` <br>
`summarize wage in 1/50, detail` <br>
`summarize wage if female == 1 in 1/750, detail`

---

- Using a log file
  - All results are written to an output file which Stata calls a **log** file
  - Log files can be saved in a **text** format or a **smcl** format.
  - To save in text format<br>
`log using lesson1, replace text` will open the log file and replace one by the same name if it exists.<br>
`log using "lesson1 output", replace text` <br>
`log using lesson1, append` will open an existing log file and add new results at the end

  - To save in smcl format<br>
`log using lesson1, replace`<br> 
`log using "lesson1 output", replace`

  - To close the log file enter <br>
`log close`
  
## Using stata graphics

### Histograms<br>
`histogram wage`<br>
`histogram wage, percent`<br>
`histogram wage, percent title(Histogram of wage data)`<br><br>
`histogram wage, percent title(Histogram of wage data)///`<br>
`saving(lesson1hist, replace)`<br><br>
`histogram wage, percent ytitle(Percent) xtitle(wage) ///`<br>
`title(Histogram of wage data) saving(lesson1hist, replace)`

---

:::{.incremental}

- **Scatter diagrams**<br>
`twoway (scatter wage educ)`<br>
`twoway (scatter wage educ), saving(wage_educ, replace)`

- **Using Stata *do* files**
  - A do file is a method for executing commands
  - Right click on the **Review** window and click **Select All**, right click again and click **Send to Do File Editor**.
:::

---

:::{.incremental}

- **Generating new variables**<br>
`generarte wage2 = wage^2`<br>
`gen lwage = ln(wage)`

- **Dropping and keeping variables and observations**<br>
  - Drop variables<br>
`drop wage2 lwage`<br>
`drop if wage > 5.50` will drop all observations for which wage is greater than 5.50, or missing.<br>
` drop if _n > 100` will drop all observations in data rows 100 and above, keeping only the first 100 observations.<br>
  - Keep variables<br>
`keep wage2 lwage`
:::

## Using arithmetic operators
:::{.incremental}
- Examples<br>
`generate wage1 = wage+1` (addition)<br>
`generate negwage = -wage` (negative or negation)<br>
`generate blackeduc = black*educ` (multiplication)<br>
`generate blackeduc_south = black*educ*south` (multiplication)<br>
`generate blackeduc_west = blackeduc*west` (multiplication with created variable) <br>
`generate wage_yr = wage/educ` (division)<br>
`generate blackeduc_midwest = (black*educ)*midwest` (multiplication)

- Several of these constructions were for demonstration purposes only. We’ll drop them using<br>
`drop blackeduc_west blackeduc_midwest wage1 negwage wage_yr`
:::

## Using factor/categorical variables

- A categorical variable is the one that defines a group.
- They are also called **factor, discrete, dummy, binary,** or **indicator** variables.
- Examples: 
  - Profession: White collar or blue collar
  - Race: White, Black, Asian, or African
  - Gender: Male or Female
- Indicator variable: is a special category of categorical variable. It has only two categories, e.g. gender (male or female).
- Another name for indicator variable is a **dummy** variable. The term “dummy” is meant to convey the idea that we are using a numerical value, such as 0 or 1, to represent a qualitative characteristic such as gender.


## Using factor/categorical variables
:::{.incremental}
- Stata treats categorical variables as factor variables. They are designated in operations with an “i.” prefix, such as `i.female` or `i.black`. 
- To designate a variable as continuous use the prefix “c.”, as in `c.wage`. Variables such as years of education or experience can be treated as either.
- Examples:<br>
`summarize i.female`<br>
`summarize i.female, allbaselevels` to show the base level <br>
`summarize ib1.female` to define female = 1 (males) to be the base group <br>
`summarize ibn.female` to show summary statistics for all levels (no base group is omitted) 

- Factor variables and continuous variables can be interacted with each using the operator “#”<br>
`summarize c.wage#i.female i.female#i.married`
:::

## Creating indicator variables using a logical operator
:::{.incremental}
- To create an indicator variable we use the generate command with a condition to be satisfied. 
- If the condition is true, then the variable is assigned the value 1 and if it is not true the variable is assigned the value 0.<br>
`generate hs = (9 <= educ) & (educ <= 12)`

- The missing values can be ignored by <br>
`generate hs = (9 <= educ) & (educ <= 12) if !missing(educ)`

:::

## Creating indicator variables using tabulate
:::{.incremental}
- To create a separate indicator variable for each level of a categorical variable, the tabulate command is convenient. 
- For example, suppose we wanted a separate 0-1 variable for each possible year of education.<br>
`tabulate educ, gen(ed)` <br>
The option **gen(ed)** generates a series of 13 indicator variables, **ed1-ed13**, for each possible value of the variable educ.
:::

## Data

- [food](data/food.dta)
- [growth](data/growth.csv)

---


1. Construct a scatterplot of average annual growth rate (Growth) on the average trade share (TradeShare). Does there appear to be a relationship between the variables?

2. One country, Malta, has a trade share much larger than the other countries. Find Malta on the scatterplot. Does Malta look like an outlier?

3. Using all observations, run a regression of Growth on TradeShare. What is the estimated slope? What is the estimated intercept? Use the regression to predict the growth rate for a country with a trade share of 0.5 and with a trade share equal to 1.0.

4. Estimate the same regression, excluding the data from Malta. Answer the same questions in (c).

5. Plot the estimated regression functions from (c) and (d). Using the scatterplot in (a), explain why the regression function that includes Malta is steeper than the regression function that excludes Malta.


